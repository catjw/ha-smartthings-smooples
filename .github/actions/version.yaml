name: 'version'
description: 'GitHub action helper: version'

inputs:
  # type:
  #   description: The type of target to check against (core, supervisor, plugin, generic)
  #   required: false
  #   default: 'generic'
  core_version:
    description: The version of Home Assistant core to use
    required: false
    type: string
outputs:
  version:
    description: The version found for the requested type
    value: ${{ steps.version.outputs.version }}
  # stable:
  #   description: Returns "true" if it is a stable build, else "false"
  #   value: ${{ steps.version.outputs.stable }}
  # channel:
  #   description: Returns suggested channel.
  #   value: ${{ steps.channel.outputs.channel }}
  publish:
    description: Returns "true" if it should be published, else "false"
    value: ${{ steps.publish.outputs.publish }}
runs:
  using: "composite"
  steps:
    # - shell: bash
    #   env:
    #     INPUTS_TYPE: ${{ inputs.type }}
    #   run: |
    #     if [[ -z "$INPUTS_TYPE" ]];then
    #       echo "::error::Missing required key 'type' input!"
    #       exit 1
    #     fi

    - shell: bash
      id: version
      env:
        GITHUB_EVENT_INPUTS_VERSION: ${{ github.event.inputs.version }}
        GITHUB_EVENT_INPUTS_STABLE: ${{ github.event.inputs.stable }}
        INPUTS_TYPE: ${{ inputs.type }}
        EVENT_NAME: ${{ github.event_name }}
        REF: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref }}
        UV_SYSTEM_PYTHON: "true"
        CORE_VERSION: ${{ inputs.core_version }}
      run: |
        version=$(echo "$REF" | awk -F"/" '{print $NF}' )
        
        core_version=$(grep "homeassistant" requirements.txt | awk -F"==" '{print $2}')
        echo "    CORE_VERSION: ${core_version}"

        if [[ "${CORE_VERSION}" == "" ]]; then
          CORE_VERSION=$(grep "homeassistant" requirements.txt | awk -F"==" '{print $2}')
        fi

        if [[ "${version}" == "master" ]]; then
          base_ver=$CORE_VERSION
        elif [[ "${version}" == "dev" ]]; then
          today="$(date --utc '+%Y-%m-%d')"
          calver_date="$(date --utc --date=$today '+%Y.%m')"
          if tag=$(git describe --tags --abbrev=0 --match="${calver_date}.*" 2>/dev/null); then
            base_ver="$(echo $tag | awk -F. '{printf "%s.%s.%d",$1,$2,$3+1}')"
          else
            base_ver="${calver_date}.0"
          fi        
          commit_count="$(git rev-list --count --since=$midnight_timestamp HEAD)"
          calver_dev="$(date --utc --date=$today '+.dev%d')$(printf "%02d" ${commit_count})"
          base_ver="${base_ver}${calver_dev}"
        fi
        commit_count=$(git tag --list "${base_ver}*" | wc -l)

        echo "VERSION: ${base_ver}.${commit_count}"

        echo "version=${base_ver}.${commit_count}" >> "$GITHUB_OUTPUT"

    # - shell: bash
    #   id: publish
    #   env:
    #     INPUTS_TYPE: ${{ inputs.type }}
    #     GITHUB_EVENT_INPUTS_PUBLISH: ${{ github.event.inputs.publish }}
    #     EVENT_NAME: ${{ github.event_name }}
    #     HEAD_REF: ${{ github.head_ref }}
    #   run: |
    #     if [[ ! -z "$GITHUB_EVENT_INPUTS_PUBLISH" ]]; then
    #         echo "publish=$GITHUB_EVENT_INPUTS_PUBLISH" >> "$GITHUB_OUTPUT"

    #     elif [[ "$INPUTS_TYPE" =~ (plugin|supervisor) ]]; then
    #       if [[ ! -z "$HEAD_REF" ]]; then
    #         echo "publish=false" >> "$GITHUB_OUTPUT"
    #       elif [[ "$EVENT_NAME" =~ (release|push) ]]; then
    #         echo "publish=true" >> "$GITHUB_OUTPUT"
    #       else
    #         echo "publish=false" >> "$GITHUB_OUTPUT"
    #       fi

    #     elif [[ "$INPUTS_TYPE" == "core" ]]; then
    #       if [[ "$EVENT_NAME" == "release" ]]; then
    #         echo "publish=true" >> "$GITHUB_OUTPUT"
    #       else
    #         echo "publish=false" >> "$GITHUB_OUTPUT"
    #       fi
    #     fi