name: Check for Home Assistant Release

on:
  schedule:
    - cron: '0 6 * * *' # Every day at 6 AM UTC
  workflow_dispatch:
  workflow_call:
  
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out repository"
        uses: "actions/checkout@v4"
      - name: Get current version
        id: current
        run: |
          current_ver=$(grep "homeassistant" requirements.txt | awk -F"==" '{print $2}')
          echo "current=${current_ver}" >> $GITHUB_OUTPUT
      - name: Setup Python
        uses: "actions/setup-python@v4.7.0"
        with:
          python-version: 3.13.2
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
      - name: Get latest Version
        id: latest
        run: |
          latest=$(python3 -m pip index versions homeassistant | grep ^homeassistant | awk -F'[()]' '{print $2}')
          echo "latest=${latest}" >> $GITHUB_OUTPUT
      - name: Compare versions
        id: compare
        run: |
          echo "${{ join(steps.current.outputs.*, '\n') }}"
          echo "${{ join(steps.latest.outputs.*, '\n') }}"
          if [ "${{ steps.current.outputs.current }}" != "${{ steps.latest.outputs.latest }}" ]; then
            echo "Versions are different"
            echo "version=${{ steps.latest.outputs.latest }}" >> "$GITHUB_OUTPUT"
            echo "release_changed=true" >> $GITHUB_OUTPUT
            else
            echo "Versions are the same"
            echo "version=${{ steps.current.outputs.current }}" >> "$GITHUB_OUTPUT"
            echo "release_changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Call to update code
        if: steps.compare.outputs.release_changed == 'true'
        uses: ./.github/actions/update-module
        with:
          version: ${{ steps.compare.outputs.version }}
          token: ${{ secrets.GH_TOKEN }}
      - name: Update Pipfile.lock
        run: |
          pipenv lock
      - name: commit changes
        if: steps.compare.outputs.release_changed == 'true'
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --type bool push.autoSetupRemote true
          git add .
          git commit -m "Update to ${{ inputs.version }}"
      - name: push changes
        shell: bash
        run: |
          git push origin ${{ inputs.version }}
